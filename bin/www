#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('flyweb-mp3:server');
var os =  require('os');
var http = require('http');
var mdns = require('mdns');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create mDNS advertisement for FlyWeb
 */

var fw;

function start_flyweb(name) {
	app._server_name = name;
	fw = mdns.createAdvertisement(mdns.tcp('flyweb'), port, {
	  //todo: allow admin to customize broadcast name.
	  name: app._server_name,
	  txtRecord: {}
	});

	fw.start();
	console.log("")
	console.log("server started as '" + name + "'");
	console.log("Listening on http://localhost:3000/ as well as flyweb")
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('close', onClose);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // Start broadcasting FlyWeb
  start_flyweb("Wand (" + os.hostname() + ")");
}

/**
 * Event listener for HTTP server "close" event.
 */

function onClose() {
  // Stop broadcasting FlyWeb
  fw.stop();
}

/**add restart/rename feature to app*/
app.restart_flyweb = function (name) {
	console.log("restarting server...")
	//kill server
	fw.stop();

	//start server
	start_flyweb(name);
}
